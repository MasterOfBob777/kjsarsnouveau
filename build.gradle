plugins {
    id 'idea'
    id 'java-library'
    id 'maven-publish'
    id 'net.neoforged.moddev' version '1.0.23'
}

tasks.named('wrapper', Wrapper).configure {
    distributionType = Wrapper.DistributionType.BIN
}

version = mod_version
group = mod_group_id

repositories {
    mavenLocal()

    maven {
        url 'https://maven.blamejared.com'
        content {
            includeGroup "com.hollingsworth.ars_nouveau"
            includeGroup "mezz.jei"
            includeGroup "vazkii.patchouli"
        }
    }

    maven {
        name = 'GeckoLib'
        url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
        content {
            includeGroup("software.bernie.geckolib")
        }
    }

    maven {
        url = "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }

    maven {
        // saps.dev Maven (KubeJS and Rhino)
        url = "https://maven.saps.dev/minecraft"
        content {
            includeGroup "dev.latvian.mods"
            includeGroup "dev.latvian.apps"
        }
    }

    maven {
        // Shedaniel's maven (Architectury API)
        url = "https://maven.architectury.dev"
        content {
            includeGroup "dev.architectury"
        }
    }

    maven {
        url = "https://maven.fabricmc.net/"
    }

    maven {
        url 'https://jitpack.io'
        content {
            includeGroup "com.github.rtyley"
            includeGroup "com.github.glitchfiend"
        }
    }

    maven { url "https://maven.octo-studios.com/releases" }
}

dependencies {
    implementation "dev.architectury:architectury-neoforge:$architectury_version"

    // KubeJS
    implementation "dev.latvian.mods:kubejs-neoforge:$kubejs_version"
    implementation "dev.latvian.mods:rhino:$rhino_version"

    // Ars Nouveau
    compileOnly "com.hollingsworth.ars_nouveau:ars_nouveau-1.21.1:$arsnouveau_version"
    //implementation "vazkii.patchouli:Patchouli:$patchouli_version"
    //implementation "top.theillusivec4.curios:curios-neoforge:$curios_version"
    //implementation "software.bernie.geckolib:geckolib-neoforge-1.21.1:$geckolib_version"
    //implementation "curse.maven:terrablender-940057:$terrablender_version"

    compileOnly "mezz.jei:jei-$minecraft_version-common-api:$jei_version"
    compileOnly "mezz.jei:jei-$minecraft_version-neoforge-api:$jei_version"

    runtimeOnly "mezz.jei:jei-$minecraft_version-neoforge:$jei_version"

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

}

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

neoForge {
    version = project.neo_version

    parchment {
        mappingsVersion = project.parchment_mappings_version
        minecraftVersion = project.parchment_minecraft_version
    }
    runs {
        client {
            client()

            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        server {
            server()
            programArgument '--nogui'
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        gameTestServer {
            type = "gameTestServer"
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        data {
            data()
            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }

        configureEach {
            systemProperty 'forge.logging.markers', 'REGISTRIES'
            logLevel = org.slf4j.event.Level.DEBUG
        }
    }

    mods {
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
    runtimeClasspath.extendsFrom localRuntime
}

var generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description
    ]
    inputs.properties replaceProperties
    expand replaceProperties
    from "src/main/templates"
    into "build/generated/sources/modMetadata"
}

sourceSets.main.resources.srcDir generateModMetadata
neoForge.ideSyncTask generateModMetadata

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}
